{"version":3,"sources":["components/PlayToggle/index.jsx","components/TimeDisplay/index.jsx","components/TimeInput/index.jsx","components/Timer/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["PlayToggle","icon","onClick","className","width","height","viewBox","fill","xmlns","d","play","pause","reset","Timer","timeText","TimeInput","initialSeconds","setTime","useState","minutes","setMinutes","seconds","setSeconds","minutesNegative","secondsNegative","secondsOver59","useEffect","Math","floor","type","aria-label","value","onChange","e","parseInt","target","alert","defaultProps","remainingSeconds","setRemainingSeconds","running","setRunning","finished","setFinished","intervalCb","setIntervalCb","setInitialSeconds","reduceTime","stopTimer","clearInterval","givenSeconds","secondsToText","setInterval","toggleIcon","toggleBtnCb","document","title","message","msg","SpeechSynthesisUtterance","text","window","speechSynthesis","speak","saySomething","setTimeButton","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.863b982e.chunk.js","sourcesContent":["import React from 'react';\nimport './PlayToggle.css';\n\nfunction PlayToggle({icon, onClick}) {\n    const iconPaths = {\n        play: \"M130.53 61.0914C137.806 64.8019 137.806 75.1981 130.53 78.9086L14.7929 137.928C8.13952 141.321 0.249979 136.488 0.249979 129.02L0.249984 10.9804C0.249985 3.5119 8.13951 -1.32099 14.7928 2.07184L130.53 61.0914Z\",\n        pause: \"M37.9167 111.958C37.9167 122.179 29.5542 130.542 19.3333 130.542C9.1125 130.542 0.75 122.179 0.75 111.958V19.0417C0.75 8.82083 9.1125 0.458328 19.3333 0.458328C29.5542 0.458328 37.9167 8.82083 37.9167 19.0417V111.958ZM75.0833 111.958V19.0417C75.0833 8.82083 83.4458 0.458328 93.6667 0.458328C103.887 0.458328 112.25 8.82083 112.25 19.0417V111.958C112.25 122.179 103.887 130.542 93.6667 130.542C83.4458 130.542 75.0833 122.179 75.0833 111.958Z\",\n        reset: \"M78.1264 32.5775V4.96386C78.1264 0.510054 72.8054 -1.66736 69.7508 1.49979L32.3073 39.0107C30.3366 40.9902 30.3366 44.0584 32.3073 46.0379L69.6523 83.5488C72.8054 86.617 78.1264 84.4396 78.1264 79.9858V52.3722C114.88 52.3722 143.948 86.2211 135.868 124.524C131.237 146.991 113.107 165.103 90.8375 169.755C55.6602 177.178 24.3259 152.929 19.5962 120.169C18.9064 115.418 14.7679 111.756 9.93968 111.756C4.02754 111.756 -0.702176 117.002 0.0861097 122.94C6.19532 166.39 47.3832 198.556 93.9906 189.45C124.734 183.413 149.466 158.571 155.477 127.691C165.232 76.9176 126.803 32.5775 78.1264 32.5775Z\",\n    }\n    \n    return (\n        <div className=\"playToggleContainer\">\n            <button className=\"playToggleButton\" onClick={onClick}>\n                <svg\n                    className=\"playToggleIcon\"\n                    width=\"136\"\n                    height=\"140\"\n                    viewBox={ icon === 'reset' ? \"0 0 190 191\" : \"0 0 136 140\" }\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path d={iconPaths[icon]} fill=\"white\"/>\n                </svg>\n            </button>\n        </div>\n    )\n}\n\nexport default PlayToggle;","import React from 'react';\nimport './TimeDisplay.css';\n\nfunction Timer({timeText}) {\n    \n    return (\n        <div className=\"timeDisplayContainer\">\n            <div className=\"timeText\">{ timeText }</div>\n        </div>\n    )\n}\n\nexport default Timer;","import React, {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport './TimeInput.css';\n\nfunction TimeInput({initialSeconds, setTime}) {\n    const [minutes, setMinutes] = useState(0);\n    const [seconds, setSeconds] = useState(0);\n    \n    const minutesChange = e => setMinutes(parseInt(e.target.value));\n    const secondsChange = e => setSeconds(parseInt(e.target.value));\n    const minutesNegative = minutes < 0;\n    const secondsNegative = seconds < 0;\n    const secondsOver59 = seconds > 59;\n    const clickHandler = () => {\n        if (minutesNegative) {\n            alert(\"You cannot use a negative number in the field of minutes.\");\n        } else if (secondsNegative) {\n            alert(\"You cannot use a negative number in the field of seconds.\");\n        } else if (secondsOver59) {\n            alert(\"The number of seconds cannot be over 59.\")\n        } else {\n            setTime(minutes * 60 + seconds);\n        }\n    }\n    \n    useEffect(() => {\n        setMinutes(Math.floor(initialSeconds / 60));\n        setSeconds(initialSeconds % 60);\n    }, [initialSeconds]);\n\n    return (\n        <div className=\"timeInputContainer\">\n            <input\n                type=\"number\"\n                aria-label=\"minutes\"\n                className={`minutesField ${minutesNegative ? 'fieldError' : ''}`}\n                value={minutes}\n                onChange={minutesChange}\n            />\n            m\n            <input\n                type=\"number\"\n                aria-label=\"seconds\"\n                className={`secondsField ${secondsNegative || secondsOver59 ? 'fieldError' : ''}`}\n                value={seconds}\n                onChange={secondsChange}\n            />\n            s\n            <button\n                aria-label=\"set\"\n                onClick={clickHandler}\n                className=\"setCustomTimeButton\"\n            >\n                Set\n            </button>\n        </div>\n    )\n}\n\nTimeInput.defaultProps = {\n    initialSeconds: 0,\n    setTime: () => {},\n}\n\nTimeInput.propTypes = {\n    initialSeconds: PropTypes.number,\n    setTime: PropTypes.func,\n}\n\nexport default TimeInput;","import React, { useState, useEffect } from 'react';\nimport PlayToggle from '../PlayToggle';\nimport TimeDisplay from '../TimeDisplay';\nimport TimeInput from '../TimeInput';\nimport './Timer.css';\n\nfunction Timer() {\n    const [remainingSeconds, setRemainingSeconds] = useState(60);\n    const [running, setRunning] = useState(false);\n    const [finished, setFinished] = useState(false);\n    const [intervalCb, setIntervalCb] = useState();\n    const [initialSeconds, setInitialSeconds] = useState(60);\n\n    const secondsToText = givenSeconds => {\n        const minutes = Math.floor(givenSeconds / 60);\n        const seconds = givenSeconds % 60;\n        return `${minutes}:${seconds<10 ? \"0\" : \"\"}${seconds}`;\n    }\n\n    const reduceTime = () => setRemainingSeconds(remainingSeconds => remainingSeconds - 1);\n\n    const startTimer = () => {\n        setIntervalCb(setInterval(reduceTime ,1000));\n        setRunning(true);\n    }\n\n    const stopTimer = () => {\n        clearInterval(intervalCb);\n        setRunning(false);\n    }\n\n    const resetTimer = () => {\n        setRemainingSeconds(initialSeconds);\n        setFinished(false);\n    }\n\n    const saySomething = message => {\n        var msg = new SpeechSynthesisUtterance();\n        msg.text = message;\n        window.speechSynthesis.speak(msg);\n    }\n    \n    const timeText = secondsToText(remainingSeconds);\n    const [toggleIcon, toggleBtnCb] = running ?\n        ['pause', stopTimer] :\n        (\n            finished ?\n            ['reset', resetTimer] :\n            ['play', startTimer]\n        );\n\n    useEffect(() => {\n        document.title = `SmartTimer - ${timeText}`;\n        if (remainingSeconds === 0) {\n            stopTimer();\n            setFinished(true);\n            saySomething('Time is up');\n        }\n    }, [remainingSeconds, timeText])\n\n    const setTime = seconds => {\n        stopTimer();\n        setRemainingSeconds(seconds);\n        setInitialSeconds(seconds);\n        setFinished(false);\n    }\n\n    const setTimeButton = minutes => {\n        const clickHandler = () => {\n            setTime(minutes * 60);\n        };\n        return (\n            <button\n                className=\"setTimeButton\"\n                onClick={clickHandler}\n            >\n                {`${minutes}m`}\n            </button>\n        );\n    } \n    return (\n        <div className=\"container\">\n            <PlayToggle icon={toggleIcon} onClick={toggleBtnCb} />\n            <TimeDisplay timeText={timeText} />\n            <TimeInput initialSeconds={initialSeconds} setTime={setTime} />\n            <div className=\"setTimeButtonsContainer\">\n                {setTimeButton(5)}\n                {setTimeButton(15)}\n                {setTimeButton(30)}\n            </div>\n        </div>\n    )\n}\n\nexport default Timer;","import './App.css';\nimport Timer from './components/Timer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"typeface-rubik\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}